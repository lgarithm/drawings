# -*- mode: sh -*-

set -e

opts='-std=c++0x'

move(){
    cp -v $1/*.h build 2> /dev/null || true
    cp -v $1/*.cpp build 2> /dev/null || true
}

prepare_source(){
    for m in `ls src/modules`; do
	move src/modules/$m
    done
    move src/apps/ray
}

gen_object_target(){
    g++ -MM $1
    echo -e "\tgcc $opts -c $1"
    echo
}

gen_dep_objets(){
    for c in `gcc -MM $1 | tr " " "\n" | grep ".h$" | sed 's/.h$/.cpp/g'`; do
	if [ ! -z `ls | grep $c` ]; then
	    echo `basename $c .cpp`.o
	fi
    done
}

gen_out_target(){
    base=`basename $1 .cpp`
    deps=`gen_dep_objets $1 | tr "\n" " "`
    echo $base".out: $deps"
    echo -e "\tg++ $opts $deps $1 -o $base.out"
    echo
}

gen_build_makefile(){
    echo "default: binary alltests allbinaries"
    echo

    echo "alltests: "`ls *_test.cpp | sed 's/.cpp$/.out/' | tr "\n" " "`
    echo
    echo "allbinaries:"`ls *_main.cpp | sed s'/.cpp/.out/' | tr "\n" " "`
    echo -e "\t cp *_main.out ../bin"
    echo

    echo "binary: render.out"
    echo -e "\tmkdir -p ../bin"
    echo -e "\tcp render.out ../bin/ray"
    echo

    gen_out_target render.cpp

    for m in `ls *_main.cpp`; do
	gen_out_target $m
    done

    for t in `ls *_test.cpp`; do
	gen_out_target $t
    done

    for c in `ls *.cpp`; do
	gen_object_target $c
    done
}

gen_makefile(){
    echo "main:"
    echo -e "\tcd build && make"

    echo "check:"
    for t in `ls build/*_test.cpp`; do
	echo -e "\t./build/`basename $t .cpp`.out"
    done
    for m in `ls build/*_main.cpp`; do
	echo -e "\t./bin/`basename $m .cpp`.out -t"
    done
    echo -e "\t./bin/ray -t"
}

config(){
    mkdir -p build
    prepare_source
    cd build
    gen_build_makefile > Makefile
    cd ..
    gen_makefile > Makefile
}

config
