# -*- mode: sh -*-

set -e

g++ -dumpversion

cc='g++ -std=c++0x -I../include'

opts='-O3 -fPIC'

move(){
    cp -v $1/*.h build/include 2> /dev/null || true
    cp -v $1/*.cpp build/src 2> /dev/null || true
}

prepare_source(){
    for m in `ls src/modules`; do
        move src/modules/$m
    done
}

gen_object_target(){
    $cc -MM $1
    echo -e "\t$cc $opts -c $1"
    echo
}

gen_dep_objets(){
    for c in `$cc -MM $1 | tr " " "\n" | grep ".h$" | sed 's/.h$/.cpp/g' | sort | uniq`; do
        if [ -f "`basename $c`" ]; then
            echo `basename $c .cpp`.o
        fi
    done
}

gen_out_target(){
    base=`basename $1 .cpp`
    deps=`gen_dep_objets $1 | tr "\n" " "`
    echo $base".out: $deps"
    echo -e "\t$cc $opts $deps $1 -o $base.out"
    echo
}

gen_lib_target(){
    objs=`find ../../src/modules | grep .cpp | grep -v test | awk -F "/" '{print $6}' | sed 's/.cpp$/.o/' | tr "\n" " "`
    echo "librey.a: $objs"
    echo -e "\tar rcs librey.a $objs"
    echo
    echo "librey.so: $objs"
    echo -e "\t$cc $opts -shared -o librey.so $objs"
    echo
}

gen_build_makefile(){
    echo "default: all_tests all_libraries all_binaries"
    echo

    echo "all_tests: "`ls *_test.cpp | sed 's/.cpp$/.out/' | tr "\n" " "`
    echo
    echo "all_libraries: librey.a librey.so"
    echo
    echo "all_binaries: "`ls *_main.cpp | sed s'/.cpp/.out/' | tr "\n" " "`
    echo

    echo "# Binaries"
    for m in `ls *_main.cpp`; do
        gen_out_target $m
    done

    echo "# Tests"
    for t in `ls *_test.cpp`; do
        gen_out_target $t
    done

    echo "# Libs"
    gen_lib_target

    echo "# Objects"
    for c in `ls *.cpp`; do
        gen_object_target $c
    done

    echo "# Clean"
    echo "clean:"
    echo -e "\t-rm *.a *.o *.out *.so"
}

gen_makefile(){
    echo "default: core demo"
    echo
    echo "core:"
    echo -e "\tcd build/src && make"
    echo -e "\tcp build/src/*.a build/lib"
    echo -e "\tcp build/src/*.so build/share"
    echo

    echo "check: core"
    for t in `ls build/src/*_test.cpp`; do
        echo -e "\t./build/src/`basename $t .cpp`.out"
    done
    for m in `ls build/src/*_main.cpp`; do
        echo -e "\t./build/src/`basename $m .cpp`.out -t"
    done
    echo

    echo "install: core"
    echo -e "\tmkdir -p $prefix"
    echo -e "\tcp -r build/bin $prefix/"
    echo -e "\tcp -r build/lib $prefix/"
    echo -e "\tcp -r build/include $prefix/"
    echo -e "\tcp -r build/share $prefix/"
    echo

    echo "demo: core"
    echo -e "\tcd src/apps && bash ./configure && make"
    echo

    echo "clean:"
    echo -e "\tcd build && make clean"
}

config(){
    mkdir -p build/src
    mkdir -p build/bin
    mkdir -p build/include
    mkdir -p build/lib
    mkdir -p build/share
    prepare_source
    cd build/src
    gen_build_makefile > Makefile
    cd ../..
    gen_makefile > Makefile
}

prefix=$HOME/local/librey
config
mkdir -p output
